exit
(last "shit?")
(--> last "shit?")
(--> "shit?" last )
(-> "shit?" last )
(->> "shit?" last )
(->> "shit?" last #(== '?') )
(->> "shit?" last %(== '?') )
(->> "shit?" last #(= '?') )
(->> "shit?" last #(= "?") )
(->> "shit?" last = "?" )
(->> "shit?" last #(= % "?") )
(= 'x' '?')
(-> "shit?" last #(= % '?') )
 (= (last "Shit?") '?')
(last "Shit?")
 (= (last "Shit?") '\?')
 (= (last "Shit?") "\?")
 (= (last "Shit?") "?")
 (== (last "Shit?") "?")
 (= (last "Shit?") \?)
exit
(Character/isLetter "SHIt!ja aa")
(int "S")
(some "ShitW")
(some "ShitW" "X")
(seq "Shit")
(some #(Character/isLetter %) (seq "Shit"))
(-> "Shit!" seq)
(-> "Shit!" seq rest)
(-> seq "Shit!" rest)
(-> "Shit!" seq rest)
(some #(Character/isLetter %) (-> "Shit!" seq rest))
(some #(Character/isLetter %) (-> "hit!" seq rest))
(some #(Character/isLetter %) (-> "Shit!" seq rest))
Character/isUpperCase
(some #(Character/isUpperCase %) (-> "Shit!" seq rest))
(some #(Character/isUpperCase %) (-> "SThit!" seq rest))
(nil? "")
(empty? "")
(empty? " ")
(clojure.string/blank? " ")
(clojure.string/blank? "")
(str/blank? "")
(= "SHIT!" (clojure.string/upper-case "shit!")
)
(= "SHIT!" (clojure.string/upper-case "shit!"))
(= "SHIT!" (clojure.string/upper-case "shit"))
(Character/isLetter "2, 2")
(Character/hasLetter "2, 2")
(Character/isLetter "2")
(doc Character/isLetter )
(Character/isLetter
)
(filter #(Character/isLetter %) (seq "shit is 1 2 3 haha"))
(str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
(def x (str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha"))))
x
(str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
(join (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha"))
)
(str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
(filter #(Character/isLetter %) (seq "shit is 1 2 3 haha"))
(str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
str
(doc str)
(clojure.core/str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
@(clojure.core/str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
(->> apply str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
(apply str (filter #(Character/isLetter %) (seq "shit is 1 2 3 haha")))
(apply str (filter #(Character/isLetter %) (seq "shit is 1 ,2 3 haha!")))
(load-file "bob.clj")
exit
(load-file "bob.clj")
(defn scrub-sentences
  [sentences]
  (apply str (filter #(Character/isLetter %) (seq sentences))))
(scrub-sentences "1, 2, 3")
(scrub-sentences "1, 2, 3")(defn is-shouting?
  [reply]
  (and (not (string/blank? reply))
  (= reply (string/upper-case reply))))
(defn is-shouting?
  [reply]
  (and (not (string/blank? reply))
  (= reply (string/upper-case reply))))
(require [clojure.string :as string])
(:require [clojure.string :as string])
(require '[clojure.string :as string])
(defn is-shouting?
  [reply]
  (and (not (string/blank? reply))
  (= reply (string/upper-case reply))))
(is-shouting? "WHAT THE HELL")
(is-shouting? (scrub-sentences "WHAT THE HELL"))
(scrub-sentences "WHAT THE HELL??")
(is-shouting? (scrub-sentences "WHAT THE HELL"))
(is-shouting? (scrub-sentences "WHAT THE HELL 24325"))
(is-shouting? (scrub-sentences " 24325"))
(is-shouting? (scrub-sentences " 24325!"))
